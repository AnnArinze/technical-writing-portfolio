openapi: 3.0.3
info:
  title: Ann's Practice API - OpenAPI 3.0
  description: |-
    This is a test Postman collection covering simple operations of a StudSocAPI. For a more in depth look at how things work, check out the official documentation.
    Getting started
    To get started, sign up for a developer account at studsoc.com  and get your authentication key from your account page.
    From there, fork this Stud Soc  collection, and select the relevant base-url variable depending on your faculty.         
    In the Authorization section of your forked collection, you will see the value Stud Soc [yourAuthKey]. Change [`AuthKey`] for your own key and you're ready to go!
    Want to get even more involved? Join the StudSoc community on our Discord!

  termsOfService: https://github.com/AnnArinze?tab=repositories
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: auth
    description: Everything operation about auth
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Everything operation about users
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by a new user.
      operationId: createUser
      requestBody:
        description: Create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: The user credentials required for log in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out user
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{id}:
    delete:
      tags:
        - user
      summary: delete user by id
      description: ''
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: 'The id that needs to be deleted'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: 'successful'
            application/xml:
              schema:
                type: string
                example: 'successful'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id of the user that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: 'successful'
            application/xml:
              schema:
                type: string
                example: 'successful'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /auth/recovery-email/add/{id}:
    post:
      tags:
        - auth
      summary: Add user recovery email
      description: This can only be done by the logged in user. 
      operationId: add-recovery-email
      parameters:
        - name: id
          in: path
          description: the id of the user who needs a recovery email
          required: true
          schema:
            type: string
      requestBody:
        description: The new recovery email of the logged in user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoveryEmail'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecoveryEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecoveryEmail'
      responses:
        default:
          description: successful operation
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: User forgot their password 
      description: The user must have an existing account.
      operationId: forgot-password
      requestBody:
        description: The email of the user 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoveryEmail'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecoveryEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecoveryEmail'
      responses:
        default:
          description: successful operation
  /auth/change-password:
    put:
      tags:
        - auth
      summary: The user wants to change password
      description: This can only be done by the logged in user.
      operationId: change-password
      requestBody:
        description: The new password of the user 
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "someboringpassword"
          application/xml:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "someboringpassword"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "someboringpassword"
      responses:
        default:
          description: successful operation
  /auth/verify-signup:
    post:
      tags:
        - auth
      summary: Verify your account
      description: New user must verify their account
      operationId: verify-signup
      requestBody:
        description: The token that has been sent to the user's email
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                token:
                  type: string
                  example: "someboringptoken"
          application/xml:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "someboringptoken"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "someboringptoken"
      responses:
        default:
          description: successful operation
components:
  schemas:
    RecoveryEmail:
      type: object
      properties:
        email:
          type: string
          example: zaraazgmail.com
    UserLogin:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
